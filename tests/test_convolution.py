import numpy as np
import pytest
from datacheese.convolution import conv2d


conv2d_parameters = (
    (
        np.array(
            [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
        ),
        np.array(
            [
                [1, 1],
                [1, 1],
            ],
        ),
        (1, 1),
        0,
        0,
        np.array(
            [
                [12, 16],
                [24, 28],
            ],
        ),
    ),
    (
        np.array(
            [
                [1, 1, 1, 1, 1],
                [1, 2, 3, 4, 5],
                [1, 3, 5, 7, 9],
                [1, 4, 7, 10, 13],
                [1, 5, 9, 13, 17],
            ],
        ),
        np.array(
            [
                [1, 0, -1],
                [2, 0, -2],
                [1, 0, -1],
            ],
        ),
        (1, 1),
        0,
        0,
        np.array(
            [
                [-8, -8, -8],
                [-16, -16, -16],
                [-24, -24, -24],
            ],
        ),
    ),
    (
        np.array(
            [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9],
                [10, 11, 12],
            ],
        ),
        np.array(
            [
                [1, 2, 1],
                [2, 4, 2],
            ],
        ),
        (1, 1),
        0,
        0,
        np.array(
            [
                [48],
                [84],
                [120],
            ],
        ),
    ),
    (
        np.array(
            [
                [4, 3, 1, 5],
                [1, 3, 4, 8],
                [4, 5, 4, 3],
                [6, 5, 9, 4],
            ],
        ),
        np.array(
            [
                [0, 1],
                [1, 0],
            ],
        ),
        (1, 1),
        0,
        0,
        np.array(
            [
                [4, 4, 9],
                [7, 9, 12],
                [11, 9, 12],
            ],
        ),
    ),
    (
        np.array(
            [
                [4, 3, 1, 5],
                [1, 3, 4, 8],
                [4, 5, 4, 3],
                [6, 5, 9, 4],
            ],
        ),
        np.array(
            [
                [0, 1],
                [1, 0],
            ],
        ),
        (2, 2),
        0,
        0,
        np.array(
            [
                [4, 9],
                [11, 12],
            ],
        ),
    ),
    (
        np.array(
            [
                [4, 9, 2, 5, 8, 3],
                [5, 6, 2, 4, 0, 3],
                [2, 4, 5, 4, 5, 2],
                [5, 6, 5, 4, 7, 8],
                [5, 7, 7, 9, 2, 1],
                [5, 8, 5, 3, 8, 4],
            ],
        ),
        np.array(
            [
                [1, 0, -1],
                [1, 0, -1],
                [1, 0, -1],
            ],
        ),
        (1, 1),
        1,
        0,
        np.array(
            [
                [-15, 5, 6, -4, 3, 8],
                [-19, 2, 6, -4, 5, 13],
                [-16, 0, 4, 0, -1, 12],
                [-17, -5, 0, 3, 6, 14],
                [-21, -2, 5, 0, 3, 17],
                [-15, -2, 3, 2, 7, 10],
            ],
        ),
    ),
    (
        np.array(
            [
                [4, 9, 2, 5, 8, 3],
                [5, 6, 2, 4, 0, 3],
                [2, 4, 5, 4, 5, 2],
                [5, 6, 5, 4, 7, 8],
                [5, 7, 7, 9, 2, 1],
                [5, 8, 5, 3, 8, 4],
            ],
        ),
        np.array(
            [
                [1, 0, -1],
                [1, 0, -1],
                [1, 0, -1],
            ],
        ),
        (2, 2),
        1,
        0,
        np.array(
            [
                [-15, 6, 3],
                [-16, 4, -1],
                [-21, 5, 3],
            ],
        ),
    ),
)


@pytest.mark.parametrize(
    'img, kernel, stride, padding, fill, expected_out',
    conv2d_parameters,
)
def test_conv2d(img, kernel, stride, padding, fill, expected_out):
    computed_out = conv2d(
        img,
        kernel,
        stride=stride,
        padding=padding,
        fill=fill,
    )
    assert np.array_equal(computed_out, expected_out)
