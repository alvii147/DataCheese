Search.setIndex({"docnames": ["activations", "api_documentation", "clustering", "convolution", "index", "installation", "knn", "neural_networks", "processing", "regression", "utils"], "filenames": ["activations.rst", "api_documentation.rst", "clustering.rst", "convolution.rst", "index.rst", "installation.rst", "knn.rst", "neural_networks.rst", "processing.rst", "regression.rst", "utils.rst"], "titles": ["activations", "API Documentation", "clustering", "convolution", "DataCheese", "Installation", "knn", "neural_networks", "processing", "regression", "utils"], "terms": {"datachees": [0, 2, 3, 5, 6, 7, 8, 9, 10], "sigmoid": [0, 1, 7], "x": [0, 2, 6, 7, 8, 9, 10], "function": [0, 7], "sigma": 0, "frac": [0, 10], "1": [0, 2, 3, 6, 7, 8, 9, 10], "e": [0, 7, 9], "paramet": [0, 2, 3, 6, 7, 8, 9, 10], "numpi": [0, 2, 3, 6, 7, 8, 9, 10], "ndarrai": [0, 2, 3, 6, 7, 8, 9, 10], "input": [0, 2, 6, 7, 9], "valu": [0, 3, 6, 7, 9, 10], "return": [0, 2, 3, 6, 7, 9, 10], "f": [0, 7, 8], "output": [0, 3, 7], "type": [0, 2, 3, 6, 7, 9, 10], "sigmoid_deriv": [0, 1], "none": [0, 2, 6, 7, 8, 10], "deriv": [0, 7], "If": [0, 7], "i": [0, 2, 4, 5, 6, 7, 8, 9, 10], "provid": [0, 7], "comput": [0, 2, 6, 7, 9, 10], "directli": [0, 5, 7], "2": [0, 2, 3, 6, 7, 8, 9, 10], "antideriv": [0, 7], "us": [0, 2, 3, 5, 6, 7, 8, 9, 10], "bigg": [0, 10], "default": [0, 2, 6, 7, 8, 9, 10], "f_prime": 0, "tanh": [0, 1], "hyperbol": [0, 7], "tangent": [0, 7], "tanh_deriv": [0, 1], "relu": [0, 1, 7], "rectifi": [0, 7], "linear": [0, 7, 9], "unit": [0, 7], "text": 0, "max": 0, "0": [0, 2, 3, 6, 7, 8, 9, 10], "relu_deriv": [0, 1], "begin": 0, "case": [0, 9, 10], "le": 0, "end": 0, "ne": 0, "leaky_relu": [0, 1], "alpha": [0, 7], "01": [0, 7, 9], "leaki": [0, 7], "leakyrelu": 0, "float": [0, 2, 3, 6, 7, 9, 10], "neg": [0, 7, 9], "slope": [0, 7], "where": [0, 2, 6, 7, 9], "leaky_relu_deriv": [0, 1], "activ": [1, 7], "cluster": 1, "kmean": [1, 2], "convolut": 1, "conv2d": [1, 3], "knn": 1, "neural_network": 1, "baselay": [1, 7], "linearlay": [1, 7], "sigmoidlay": [1, 7], "tanhlay": [1, 7], "relulay": [1, 7], "leakyrelulay": [1, 7], "multilayerperceptron": [1, 7], "process": [1, 6], "kfoldcrossvalid": [1, 8], "regress": 1, "linearregress": [1, 9], "logisticregress": [1, 9], "util": 1, "assert_ndarray_shap": [1, 10], "assert_fit": [1, 10], "assert_str_choic": [1, 10], "pad_arrai": [1, 10], "pairwise_dist": [1, 10], "array_mode_valu": [1, 10], "class": [2, 6, 7, 8, 9, 10], "seed": [2, 6, 7, 8, 10], "base": [2, 6, 7, 8, 9], "object": [2, 6, 7, 8, 9], "k": [2, 6, 8], "mean": [2, 7], "model": [2, 6, 7, 9], "int": [2, 3, 6, 7, 8, 9, 10], "random": [2, 6, 7, 8, 10], "shuffl": [2, 6, 8], "data": [2, 4, 6, 7, 8, 9], "exampl": [2, 3, 6, 7, 8, 9, 10], "import": [2, 3, 6, 7, 8, 9, 10], "np": [2, 3, 6, 7, 8, 9, 10], "from": [2, 3, 5, 6, 7, 8, 9, 10], "gener": [2, 6, 7, 8, 9], "arrai": [2, 3, 6, 7, 8, 9, 10], "4": [2, 3, 7, 8, 9, 10], "10": [2, 5, 8], "dtype": [2, 6, 9, 10], "float64": [2, 6, 9, 10], "fit": [2, 6, 7, 9, 10], "label": 2, "centroid": 2, "int64": 2, "make": [2, 6, 7, 9], "predict": [2, 6, 7, 9], "x_test": [2, 6, 9], "11": [2, 8, 9], "within": 2, "sum": [2, 10], "squar": [2, 9], "score": [2, 6, 9], "metric": [2, 9], "wcss": 2, "3": [2, 3, 5, 6, 7, 8, 9, 10], "0000000000000004": 2, "between": [2, 6, 9, 10], "bcss": 2, "40": 2, "5": [2, 3, 7, 8, 9], "max_it": [2, 9], "1000": [2, 9], "given": [2, 7, 10], "2d": [2, 3, 6, 7, 9, 10], "featur": [2, 6, 9], "shape": [2, 6, 7, 9, 10], "n": [2, 6, 7, 9], "d": [2, 6, 7, 9, 10], "number": [2, 3, 6, 7, 8, 9, 10], "point": 2, "dimens": [2, 3, 6, 7, 9, 10], "maximum": [2, 9], "iter": [2, 8, 9], "1d": [2, 6, 10], "contain": 2, "each": [2, 3, 7], "contrain": 2, "coordin": 2, "store": [2, 6], "m": [2, 6, 7, 9], "thi": [2, 9, 10], "can": [2, 9], "depend": [2, 9], "chosen": [2, 9], "str": [2, 9, 10], "must": [2, 9, 10], "one": [2, 9, 10], "correspond": [2, 9], "respect": [2, 7, 9], "img": 3, "kernel": 3, "stride": 3, "pad": [3, 10], "fill": 3, "perform": [3, 7, 9], "oper": 3, "over": [3, 7, 8], "imag": 3, "tupl": [3, 10], "repres": [3, 9, 10], "layer": [3, 7], "add": [3, 7, 10], "around": 3, "when": [3, 10], "out": [3, 7], "nadarrai": 3, "defin": [3, 10], "8": [3, 7, 8, 9], "9": [3, 8, 9, 10], "7": [3, 8, 9, 10], "both": 3, "17": 3, "15": 3, "31": 3, "21": 3, "python": [4, 5], "librari": 4, "implement": [4, 7], "popular": 4, "scienc": 4, "machin": 4, "learn": [4, 7, 9], "algorithm": 4, "instal": 4, "api": 4, "document": 4, "index": 4, "modul": 4, "search": 4, "page": 4, "offici": 5, "websit": 5, "abov": 5, "requir": 5, "Then": 5, "github": 5, "repositori": 5, "pip": 5, "pip3": 5, "git": 5, "http": 5, "com": 5, "alvii147": 5, "nearest": 6, "neighbour": 6, "classif": [6, 9], "target": [6, 9], "y": [6, 7, 9, 10], "y_test": [6, 9], "accuraci": [6, 9], "train": [6, 7, 8, 9], "test": [6, 7, 8, 9], "y_pred": [6, 7, 9], "n_input": 7, "n_node": 7, "kwarg": 7, "neural": 7, "network": 7, "usual": 7, "equal": 7, "node": 7, "previou": 7, "neuron": 7, "reproduc": [7, 10], "result": [7, 10], "dict": 7, "specif": 7, "activation_deriv": 7, "current": 7, "weight": [7, 9], "feed_forward": 7, "feed": 7, "forward": 7, "back_propag": 7, "lr": [7, 9], "backpropag": 7, "error": [7, 10], "propag": 7, "rate": [7, 9], "updat": [7, 9], "e_next": 7, "backward": 7, "multi": 7, "percetron": 7, "n_pattern": 7, "n_dimens": 7, "n_class": 7, "rng": 7, "default_rng": 7, "size": 7, "initi": 7, "hidden": 7, "add_lay": 7, "20": [7, 9], "epoch": 7, "verbos": 7, "loss": [7, 9], "15181599599950849": 7, "13701115369406147": 7, "11337662383705667": 7, "12": [7, 8, 9], "10121139637335393": 7, "16": 7, "09388681525946835": 7, "05310463606057757": 7, "through": 7, "actual": [7, 9], "last": [7, 10], "pattern": 7, "c": [7, 10], "log": [7, 9], "true": [8, 10], "fold": 8, "cross": 8, "valid": 8, "split": 8, "alwai": 8, "done": 8, "axi": [8, 9, 10], "bool": [8, 10], "whether": [8, 10], "befor": [8, 10], "arang": 8, "reshap": 8, "6": [8, 9], "them": 8, "train_data": 8, "test_data": 8, "enumer": 8, "print": 8, "ordinari": 9, "least": 9, "equat": 9, "y_0": 9, "x_0": 9, "x_1": 9, "x_2": 9, "y_1": 9, "matmul": 9, "14": 9, "19": 9, "r": 9, "set": [9, 10], "lamdba": 9, "non": 9, "zero": [9, 10], "ridg": 9, "lambda": 9, "13": 9, "6669421": 9, "50426919": 9, "51303651": 9, "18": 9, "88126742": 9, "99827693": 9, "99946753": 9, "t": [9, 10], "regular": 9, "constant": [9, 10], "l2": 9, "penalti": 9, "term": 9, "which": [9, 10], "special": 9, "r_squar": 9, "binari": 9, "logist": 9, "OR": 9, "AND": 9, "logic": 9, "gate": 9, "column_stack": 9, "ani": [9, 10], "all": 9, "astyp": 9, "obtain": 9, "probabl": 9, "predict_prob": 9, "15437859e": 9, "02": 9, "96513677e": 9, "04": 9, "79474434e": 9, "90497532e": 9, "99976135e": 9, "31203746e": 9, "chang": 9, "log_loss": 9, "0944218": 9, "17206078": 9, "toler": 9, "0001": 9, "method": [9, 10], "gradient": 9, "onli": 9, "descent": 9, "element": 9, "vector": [9, 10], "termin": 9, "criteria": 9, "either": 9, "newton": 9, "": 9, "y_prob": 9, "A": 10, "array_nam": 10, "assert": 10, "check": 10, "expect": 10, "ar": 10, "ignor": 10, "displai": 10, "name": 10, "construct": 10, "messag": 10, "mai": 10, "arrayshapeerror": 10, "rais": 10, "don": 10, "match": 10, "traceback": 10, "most": 10, "recent": 10, "call": 10, "invalid": 10, "got": 10, "class_nam": 10, "an": 10, "estim": 10, "ha": 10, "been": 10, "instanc": 10, "myclass": 10, "fals": 10, "notfittederror": 10, "except": 10, "yet": 10, "str_val": 10, "choic": 10, "str_name": 10, "string": 10, "case_insensit": 10, "belong": 10, "list": 10, "allow": 10, "variabl": 10, "sensit": 10, "eu_countri": 10, "germani": 10, "itali": 10, "spain": 10, "eu": 10, "countri": 10, "britain": 10, "valueerror": 10, "edg": 10, "side": 10, "ad": 10, "top": 10, "bottom": 10, "left": 10, "right": 10, "ap": 10, "a1": 10, "a2": 10, "p": 10, "pairwis": 10, "minkowski": 10, "distanc": 10, "two": 10, "textbf": 10, "follow": 10, "limit": 10, "n_": 10, "x_i": 10, "y_i": 10, "share": 10, "same": 10, "second": 10, "length": 10, "expon": 10, "extract": 10, "mode": 10, "ti": 10, "broken": 10, "randomli": 10}, "objects": {"datacheese": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "clustering"], [3, 0, 0, "-", "convolution"], [6, 0, 0, "-", "knn"], [7, 0, 0, "-", "neural_networks"], [8, 0, 0, "-", "processing"], [9, 0, 0, "-", "regression"], [10, 0, 0, "-", "utils"]], "datacheese.activations": [[0, 1, 1, "", "leaky_relu"], [0, 1, 1, "", "leaky_relu_derivative"], [0, 1, 1, "", "relu"], [0, 1, 1, "", "relu_derivative"], [0, 1, 1, "", "sigmoid"], [0, 1, 1, "", "sigmoid_derivative"], [0, 1, 1, "", "tanh"], [0, 1, 1, "", "tanh_derivative"]], "datacheese.clustering": [[2, 2, 1, "", "KMeans"]], "datacheese.clustering.KMeans": [[2, 3, 1, "", "fit"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "score"]], "datacheese.convolution": [[3, 1, 1, "", "conv2d"]], "datacheese.knn": [[6, 2, 1, "", "KNN"]], "datacheese.knn.KNN": [[6, 3, 1, "", "fit"], [6, 3, 1, "", "predict"], [6, 3, 1, "", "score"]], "datacheese.neural_networks": [[7, 2, 1, "", "BaseLayer"], [7, 2, 1, "", "LeakyReLULayer"], [7, 2, 1, "", "LinearLayer"], [7, 2, 1, "", "MultiLayerPerceptron"], [7, 2, 1, "", "ReLULayer"], [7, 2, 1, "", "SigmoidLayer"], [7, 2, 1, "", "TanhLayer"]], "datacheese.neural_networks.BaseLayer": [[7, 3, 1, "", "activation"], [7, 3, 1, "", "activation_derivative"], [7, 3, 1, "", "back_propagate"], [7, 3, 1, "", "feed_forward"], [7, 3, 1, "", "predict"]], "datacheese.neural_networks.LeakyReLULayer": [[7, 3, 1, "", "activation"], [7, 3, 1, "", "activation_derivative"]], "datacheese.neural_networks.LinearLayer": [[7, 3, 1, "", "activation"], [7, 3, 1, "", "activation_derivative"]], "datacheese.neural_networks.MultiLayerPerceptron": [[7, 3, 1, "", "add_layer"], [7, 3, 1, "", "back_propagate"], [7, 3, 1, "", "feed_forward"], [7, 3, 1, "", "fit"], [7, 3, 1, "", "predict"]], "datacheese.neural_networks.ReLULayer": [[7, 3, 1, "", "activation"], [7, 3, 1, "", "activation_derivative"]], "datacheese.neural_networks.SigmoidLayer": [[7, 3, 1, "", "activation"], [7, 3, 1, "", "activation_derivative"]], "datacheese.neural_networks.TanhLayer": [[7, 3, 1, "", "activation"], [7, 3, 1, "", "activation_derivative"]], "datacheese.processing": [[8, 2, 1, "", "KFoldCrossValidation"]], "datacheese.regression": [[9, 2, 1, "", "LinearRegression"], [9, 2, 1, "", "LogisticRegression"]], "datacheese.regression.LinearRegression": [[9, 3, 1, "", "fit"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "score"]], "datacheese.regression.LogisticRegression": [[9, 3, 1, "", "fit"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "predict_prob"], [9, 3, 1, "", "score"]], "datacheese.utils": [[10, 1, 1, "", "array_mode_value"], [10, 1, 1, "", "assert_fitted"], [10, 1, 1, "", "assert_ndarray_shape"], [10, 1, 1, "", "assert_str_choice"], [10, 1, 1, "", "pad_array"], [10, 1, 1, "", "pairwise_distances"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"activ": 0, "api": 1, "document": 1, "cluster": 2, "convolut": 3, "datachees": 4, "indic": 4, "tabl": 4, "instal": 5, "knn": 6, "neural_network": 7, "process": 8, "regress": 9, "util": 10}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"activations": [[0, "module-datacheese.activations"]], "API Documentation": [[1, "api-documentation"]], "clustering": [[2, "module-datacheese.clustering"]], "convolution": [[3, "module-datacheese.convolution"]], "DataCheese": [[4, "datacheese"]], "Indices and tables": [[4, "indices-and-tables"]], "Installation": [[5, "installation"]], "neural_networks": [[7, "module-datacheese.neural_networks"]], "regression": [[9, "module-datacheese.regression"]], "knn": [[6, "module-datacheese.knn"]], "processing": [[8, "module-datacheese.processing"]], "utils": [[10, "module-datacheese.utils"]]}, "indexentries": {"datacheese.activations": [[0, "module-datacheese.activations"]], "leaky_relu() (in module datacheese.activations)": [[0, "datacheese.activations.leaky_relu"]], "leaky_relu_derivative() (in module datacheese.activations)": [[0, "datacheese.activations.leaky_relu_derivative"]], "module": [[0, "module-datacheese.activations"], [2, "module-datacheese.clustering"], [3, "module-datacheese.convolution"], [6, "module-datacheese.knn"], [7, "module-datacheese.neural_networks"], [8, "module-datacheese.processing"], [9, "module-datacheese.regression"], [10, "module-datacheese.utils"]], "relu() (in module datacheese.activations)": [[0, "datacheese.activations.relu"]], "relu_derivative() (in module datacheese.activations)": [[0, "datacheese.activations.relu_derivative"]], "sigmoid() (in module datacheese.activations)": [[0, "datacheese.activations.sigmoid"]], "sigmoid_derivative() (in module datacheese.activations)": [[0, "datacheese.activations.sigmoid_derivative"]], "tanh() (in module datacheese.activations)": [[0, "datacheese.activations.tanh"]], "tanh_derivative() (in module datacheese.activations)": [[0, "datacheese.activations.tanh_derivative"]], "kmeans (class in datacheese.clustering)": [[2, "datacheese.clustering.KMeans"]], "datacheese.clustering": [[2, "module-datacheese.clustering"]], "fit() (datacheese.clustering.kmeans method)": [[2, "datacheese.clustering.KMeans.fit"]], "predict() (datacheese.clustering.kmeans method)": [[2, "datacheese.clustering.KMeans.predict"]], "score() (datacheese.clustering.kmeans method)": [[2, "datacheese.clustering.KMeans.score"]], "conv2d() (in module datacheese.convolution)": [[3, "datacheese.convolution.conv2d"]], "datacheese.convolution": [[3, "module-datacheese.convolution"]], "knn (class in datacheese.knn)": [[6, "datacheese.knn.KNN"]], "datacheese.knn": [[6, "module-datacheese.knn"]], "fit() (datacheese.knn.knn method)": [[6, "datacheese.knn.KNN.fit"]], "predict() (datacheese.knn.knn method)": [[6, "datacheese.knn.KNN.predict"]], "score() (datacheese.knn.knn method)": [[6, "datacheese.knn.KNN.score"]], "baselayer (class in datacheese.neural_networks)": [[7, "datacheese.neural_networks.BaseLayer"]], "leakyrelulayer (class in datacheese.neural_networks)": [[7, "datacheese.neural_networks.LeakyReLULayer"]], "linearlayer (class in datacheese.neural_networks)": [[7, "datacheese.neural_networks.LinearLayer"]], "multilayerperceptron (class in datacheese.neural_networks)": [[7, "datacheese.neural_networks.MultiLayerPerceptron"]], "relulayer (class in datacheese.neural_networks)": [[7, "datacheese.neural_networks.ReLULayer"]], "sigmoidlayer (class in datacheese.neural_networks)": [[7, "datacheese.neural_networks.SigmoidLayer"]], "tanhlayer (class in datacheese.neural_networks)": [[7, "datacheese.neural_networks.TanhLayer"]], "activation() (datacheese.neural_networks.baselayer method)": [[7, "datacheese.neural_networks.BaseLayer.activation"]], "activation() (datacheese.neural_networks.leakyrelulayer method)": [[7, "datacheese.neural_networks.LeakyReLULayer.activation"]], "activation() (datacheese.neural_networks.linearlayer method)": [[7, "datacheese.neural_networks.LinearLayer.activation"]], "activation() (datacheese.neural_networks.relulayer method)": [[7, "datacheese.neural_networks.ReLULayer.activation"]], "activation() (datacheese.neural_networks.sigmoidlayer method)": [[7, "datacheese.neural_networks.SigmoidLayer.activation"]], "activation() (datacheese.neural_networks.tanhlayer method)": [[7, "datacheese.neural_networks.TanhLayer.activation"]], "activation_derivative() (datacheese.neural_networks.baselayer method)": [[7, "datacheese.neural_networks.BaseLayer.activation_derivative"]], "activation_derivative() (datacheese.neural_networks.leakyrelulayer method)": [[7, "datacheese.neural_networks.LeakyReLULayer.activation_derivative"]], "activation_derivative() (datacheese.neural_networks.linearlayer method)": [[7, "datacheese.neural_networks.LinearLayer.activation_derivative"]], "activation_derivative() (datacheese.neural_networks.relulayer method)": [[7, "datacheese.neural_networks.ReLULayer.activation_derivative"]], "activation_derivative() (datacheese.neural_networks.sigmoidlayer method)": [[7, "datacheese.neural_networks.SigmoidLayer.activation_derivative"]], "activation_derivative() (datacheese.neural_networks.tanhlayer method)": [[7, "datacheese.neural_networks.TanhLayer.activation_derivative"]], "add_layer() (datacheese.neural_networks.multilayerperceptron method)": [[7, "datacheese.neural_networks.MultiLayerPerceptron.add_layer"]], "back_propagate() (datacheese.neural_networks.baselayer method)": [[7, "datacheese.neural_networks.BaseLayer.back_propagate"]], "back_propagate() (datacheese.neural_networks.multilayerperceptron method)": [[7, "datacheese.neural_networks.MultiLayerPerceptron.back_propagate"]], "datacheese.neural_networks": [[7, "module-datacheese.neural_networks"]], "feed_forward() (datacheese.neural_networks.baselayer method)": [[7, "datacheese.neural_networks.BaseLayer.feed_forward"]], "feed_forward() (datacheese.neural_networks.multilayerperceptron method)": [[7, "datacheese.neural_networks.MultiLayerPerceptron.feed_forward"]], "fit() (datacheese.neural_networks.multilayerperceptron method)": [[7, "datacheese.neural_networks.MultiLayerPerceptron.fit"]], "predict() (datacheese.neural_networks.baselayer method)": [[7, "datacheese.neural_networks.BaseLayer.predict"]], "predict() (datacheese.neural_networks.multilayerperceptron method)": [[7, "datacheese.neural_networks.MultiLayerPerceptron.predict"]], "kfoldcrossvalidation (class in datacheese.processing)": [[8, "datacheese.processing.KFoldCrossValidation"]], "datacheese.processing": [[8, "module-datacheese.processing"]], "linearregression (class in datacheese.regression)": [[9, "datacheese.regression.LinearRegression"]], "logisticregression (class in datacheese.regression)": [[9, "datacheese.regression.LogisticRegression"]], "datacheese.regression": [[9, "module-datacheese.regression"]], "fit() (datacheese.regression.linearregression method)": [[9, "datacheese.regression.LinearRegression.fit"]], "fit() (datacheese.regression.logisticregression method)": [[9, "datacheese.regression.LogisticRegression.fit"]], "predict() (datacheese.regression.linearregression method)": [[9, "datacheese.regression.LinearRegression.predict"]], "predict() (datacheese.regression.logisticregression method)": [[9, "datacheese.regression.LogisticRegression.predict"]], "predict_prob() (datacheese.regression.logisticregression method)": [[9, "datacheese.regression.LogisticRegression.predict_prob"]], "score() (datacheese.regression.linearregression method)": [[9, "datacheese.regression.LinearRegression.score"]], "score() (datacheese.regression.logisticregression method)": [[9, "datacheese.regression.LogisticRegression.score"]], "array_mode_value() (in module datacheese.utils)": [[10, "datacheese.utils.array_mode_value"]], "assert_fitted() (in module datacheese.utils)": [[10, "datacheese.utils.assert_fitted"]], "assert_ndarray_shape() (in module datacheese.utils)": [[10, "datacheese.utils.assert_ndarray_shape"]], "assert_str_choice() (in module datacheese.utils)": [[10, "datacheese.utils.assert_str_choice"]], "datacheese.utils": [[10, "module-datacheese.utils"]], "pad_array() (in module datacheese.utils)": [[10, "datacheese.utils.pad_array"]], "pairwise_distances() (in module datacheese.utils)": [[10, "datacheese.utils.pairwise_distances"]]}})